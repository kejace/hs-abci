<!DOCTYPE html> <html lang="en-US"> <head> <meta charset="UTF-8"> <meta http-equiv="X-UA-Compatible" content="IE=Edge"> <title>Nameservice - Keeper - </title> <link rel="shortcut icon" href="/hs-abci/favicon.ico" type="image/x-icon"> <link rel="stylesheet" href="/hs-abci/assets/css/just-the-docs.css"> <script async src="https://www.googletagmanager.com/gtag/js?id=UA-5555555-55"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', "UA-5555555-55"); </script> <script type="text/javascript" src="/hs-abci/assets/js/vendor/lunr.min.js"></script> <script type="text/javascript" src="/hs-abci/assets/js/just-the-docs.js"></script> <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- Begin Jekyll SEO tag v2.6.1 --> <title>Nameservice - Keeper</title> <meta name="generator" content="Jekyll v3.8.6" /> <meta property="og:title" content="Nameservice - Keeper" /> <meta property="og:locale" content="en_US" /> <script type="application/ld+json"> {"headline":"Nameservice - Keeper","@type":"WebPage","url":"/hs-abci/tutorial/Tutorial/Nameservice/Keeper.lhs","@context":"https://schema.org"}</script> <!-- End Jekyll SEO tag --> </head> <body> <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> <symbol id="link" viewBox="0 0 16 16"> <title>Link</title> <path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path> </symbol> </svg> <div class="page-wrap"> <div class="side-bar"> <div class="site-header"> <a href="hs-abci" class="site-title lh-tight"> </a> <button class="menu-button fs-3 js-main-nav-trigger" data-text-toggle="Hide" type="button">Menu</button> </div> <div class="navigation main-nav js-main-nav"> <nav role="navigation" aria-label="Main navigation"> <ul class="navigation-list"><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Application.html" class="navigation-list-link">Nameservice - Application</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Foundations/BaseApp.html" class="navigation-list-link">Foundations - BaseApp</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Keeper.html" class="navigation-list-link">Nameservice - Keeper</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Message.html" class="navigation-list-link">Nameservice - Message</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Module.html" class="navigation-list-link">Nameservice - Module</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Foundations/Modules.html" class="navigation-list-link">Foundations - Modules</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Foundations/Overview.html" class="navigation-list-link">tutorial</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Overview.html" class="navigation-list-link">tutorial</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Query.html" class="navigation-list-link">Nameservice - Query</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/README.html" class="navigation-list-link">Tutorial</a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/Tutorial/Nameservice/Types.html" class="navigation-list-link">Nameservice - Types</a></li><li class="navigation-list-item active"><a href="/hs-abci/" class="navigation-list-link"></a></li><li class="navigation-list-item"><a href="/hs-abci/tutorial/" class="navigation-list-link">Tutorial</a></li><li class="navigation-list-item"><a href="/hs-abci/" class="navigation-list-link">hs-abci</a></li></ul> </nav> </div> <footer class="site-footer"> <p class="text-small text-grey-dk-000 mb-4">This site uses <a href="https://github.com/pmarsceill/just-the-docs">Just the Docs</a>, a documentation theme for Jekyll.</p> </footer> </div> <div class="main-content-wrap js-main-content" tabindex="0"> <div class="main-content"> <div class="page-header js-page-header"> <div class="search"> <div class="search-input-wrap"> <input type="text" class="js-search-input search-input" tabindex="0" placeholder="Search " aria-label="Search " autocomplete="off"> <svg width="14" height="14" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" class="search-icon"><title>Search</title><g fill-rule="nonzero"><path d="M17.332 20.735c-5.537 0-10-4.6-10-10.247 0-5.646 4.463-10.247 10-10.247 5.536 0 10 4.601 10 10.247s-4.464 10.247-10 10.247zm0-4c3.3 0 6-2.783 6-6.247 0-3.463-2.7-6.247-6-6.247s-6 2.784-6 6.247c0 3.464 2.7 6.247 6 6.247z"/><path d="M11.672 13.791L.192 25.271 3.02 28.1 14.5 16.62z"/></g></svg> </div> <div class="js-search-results search-results-wrap"></div> </div> <ul class="list-style-none text-small aux-nav"> <li class="d-inline-block my-0"><a href="//github.com/f-o-a-m/hs-abci">GitHub project</a></li> </ul> </div> <div class="page"> <div id="main-content" class="page-content" role="main"> <h# Keeper ## Definition "Keeper" is a word taken from the cosmos-sdk, it's basically the interface that the module exposes to the other modules in the application. For example, in the Nameservice app, the Nameservice keeper exposes functions to `buy`/`sell`/`delete` entries in the mapping. Likewise, the Nameservice keeper depends on the keeper from the `bank` module in order to transfer tokens when executing those methods. A keeper might also indicate what kinds of exceptions are able to be caught and thrown from the module. For example, calling `transfer` while buying a `Name` might throw an `InsufficientFunds` exception, which the Namerservice module can chose whether to catch or not. ## Tutorial.Nameservice.Keeper ```haskell {-# LANGUAGE TemplateHaskell #-} module Tutorial.Nameservice.Keeper where import Data.Proxy import Data.String.Conversions (cs) import GHC.TypeLits (symbolVal) import Polysemy (Sem, Members, makeSem, interpret) import Polysemy.Error (Error, throw, mapError) import Polysemy.Output (Output) import Nameservice.Modules.Nameservice.Messages (DeleteName(..)) import Nameservice.Modules.Nameservice.Types (Whois(..), Name, NameDeleted(..), NameserviceModuleName, NameserviceError(..)) import Nameservice.Modules.Token (Token, mint) import qualified Tendermint.SDK.BaseApp as BA ``` Generally a keeper is defined by a set of effects that the module introduces and depends on. In the case of Nameservice, we introduce the custom `Nameservice` effect: ```haskell data NameserviceKeeper m a where PutWhois :: Name -> Whois -> NameserviceKeeper m () GetWhois :: Name -> NameserviceKeeper m (Maybe Whois) DeleteWhois :: Name -> NameserviceKeeper m () makeSem ''NameserviceKeeper type NameserviceEffs = '[NameserviceKeeper, Error NameserviceError] ``` where `makeSem` is from polysemy, it uses template Haskell to create the helper functions `putWhoIs`, `getWhois`, `deleteWhois`: ```haskell putWhois :: forall r. Member NameserviceKeeper r => Name -> Whois -> Sem r () getWhois :: forall r. Member NameserviceKeeper r => Name -> Sem r (Maybe Whois) deleteWhois :: forall r. Member NameserviceKeeper r => Name -> Sem r () ``` We can then write the top level function for example for deleting a name: ```haskell deleteName :: Members [Token, Output BA.Event] r => Members [NameserviceKeeper, Error NameserviceError] r => DeleteName -> Sem r () deleteName DeleteName{..} = do mWhois <- getWhois deleteNameName case mWhois of Nothing -> throw $ InvalidDelete "Can't remove unassigned name." Just Whois{..} -> if whoisOwner /= deleteNameOwner then throw $ InvalidDelete "Deleter must be the owner." else do mint deleteNameOwner whoisPrice deleteWhois deleteNameName BA.emit NameDeleted { nameDeletedName = deleteNameName } ``` The control flow should be pretty clear: 1. Check that the name is actually registered, if not throw an error. 2. Check that the name is registered to the person trying to delete it, if not throw an error. 3. Refund the tokens locked in the name to the owner. 4. Delete the entry from the database. 5. Emit an event that the name has been deleted. Taking a look at the class constraints, we see ```haskell (Members NameserviceEffs, Members [Token, Output Event] r) ``` - The `NameserviceKeeper` effect is required because the function may manipulate the modules database with `deleteName`. - The `Error NameserviceError` effect is required because the function may throw an error. - The `Token` effect is required because the function will mint coins. - The `Output Event` effect is required because the function may emit a `NameDeleted` event. ### Evaluating Module Effects Like we said before, all modules must ultimately compile to the set of effects belonging to `BaseApp`. For effects interpreted to `RawStore`, this means that you will need to define something called a `StoreKey`. A `StoreKey` is effectively a namespacing inside the database, and is unique for a given module. In theory it could be any `ByteString`, but the natural definition in the case of Nameservice is would be something like ```haskell storeKey :: BA.StoreKey NameserviceModuleName storeKey = BA.StoreKey . cs . symbolVal $ (Proxy @NameserviceModuleName) ``` With this `storeKey` it is possible to write the `eval` function to resolve the effects defined in Nameservice, namely the `NameserviceKeeper` effect and `Error NameserviceError`: ```haskell eval :: Members [BA.RawStore, Error BA.AppError] r => forall a. Sem (NameserviceKeeper ': Error NameserviceError ': r) a -> Sem r a eval = mapError BA.makeAppError . evalNameservice where evalNameservice :: Members [BA.RawStore, Error BA.AppError] r => Sem (NameserviceKeeper ': r) a -> Sem r a evalNameservice = interpret (\case GetWhois name -> BA.get storeKey name PutWhois name whois -> BA.put storeKey name whois DeleteWhois name -> BA.delete storeKey name ) ``` [Next: Query](Query.md) </div> </div> </div> </div> </body> </html>
