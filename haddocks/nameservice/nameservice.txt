-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/nameservice#readme</a>
@package nameservice
@version 0.1.0.0

module Nameservice.Aeson
defaultNameserviceOptions :: String -> Options

module Nameservice.Config
data AppConfig
AppConfig :: Context -> IORef (Maybe ThreadId) -> AppConfig
[_baseAppContext] :: AppConfig -> Context
[_prometheusServerThreadId] :: AppConfig -> IORef (Maybe ThreadId)
baseAppContext :: Lens' AppConfig Context
prometheusServerThreadId :: Lens' AppConfig (IORef (Maybe ThreadId))
makeAppConfig :: IO AppConfig

module Nameservice.Modules.Token.Types
type TokenModule = "token"
newtype Amount
Amount :: Word64 -> Amount
data TokenError
InsufficientFunds :: Text -> TokenError
data Faucetted
Faucetted :: Address -> Amount -> Faucetted
[faucettedAccount] :: Faucetted -> Address
[faucettedAmount] :: Faucetted -> Amount
faucettedAesonOptions :: Options
data TransferEvent
TransferEvent :: Amount -> Address -> Address -> TransferEvent
[transferEventAmount] :: TransferEvent -> Amount
[transferEventTo] :: TransferEvent -> Address
[transferEventFrom] :: TransferEvent -> Address
transferEventAesonOptions :: Options
instance GHC.Generics.Generic Nameservice.Modules.Token.Types.TransferEvent
instance GHC.Show.Show Nameservice.Modules.Token.Types.TransferEvent
instance GHC.Classes.Eq Nameservice.Modules.Token.Types.TransferEvent
instance GHC.Generics.Generic Nameservice.Modules.Token.Types.Faucetted
instance GHC.Show.Show Nameservice.Modules.Token.Types.Faucetted
instance GHC.Classes.Eq Nameservice.Modules.Token.Types.Faucetted
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Token.Types.Amount
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Token.Types.Amount
instance GHC.Classes.Ord Nameservice.Modules.Token.Types.Amount
instance GHC.Generics.Generic Nameservice.Modules.Token.Types.Amount
instance GHC.Num.Num Nameservice.Modules.Token.Types.Amount
instance GHC.Show.Show Nameservice.Modules.Token.Types.Amount
instance GHC.Classes.Eq Nameservice.Modules.Token.Types.Amount
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Token.Types.TransferEvent
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Token.Types.TransferEvent
instance Tendermint.SDK.BaseApp.Events.ToEvent Nameservice.Modules.Token.Types.TransferEvent
instance Tendermint.SDK.BaseApp.Logger.Select Nameservice.Modules.Token.Types.TransferEvent
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Token.Types.Faucetted
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Token.Types.Faucetted
instance Tendermint.SDK.BaseApp.Events.ToEvent Nameservice.Modules.Token.Types.Faucetted
instance Tendermint.SDK.BaseApp.Logger.Select Nameservice.Modules.Token.Types.Faucetted
instance Tendermint.SDK.BaseApp.Errors.IsAppError Nameservice.Modules.Token.Types.TokenError
instance Proto3.Suite.Class.Primitive Nameservice.Modules.Token.Types.Amount
instance Proto3.Suite.Class.HasDefault Nameservice.Modules.Token.Types.Amount
instance Proto3.Suite.Class.MessageField Nameservice.Modules.Token.Types.Amount
instance Tendermint.SDK.BaseApp.Query.Types.Queryable Nameservice.Modules.Token.Types.Amount
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Token.Types.Amount
instance Tendermint.SDK.BaseApp.Store.RawStore.IsKey Tendermint.SDK.Types.Address.Address "token"
instance Proto3.Suite.Class.Primitive Tendermint.SDK.Types.Address.Address
instance Proto3.Suite.Class.HasDefault Data.ByteArray.HexString.HexString
instance Proto3.Suite.Class.HasDefault Tendermint.SDK.Types.Address.Address
instance Proto3.Suite.Class.MessageField Tendermint.SDK.Types.Address.Address

module Nameservice.Modules.Token.Messages
data Transfer
Transfer :: Address -> Address -> Amount -> Transfer
[transferTo] :: Transfer -> Address
[transferFrom] :: Transfer -> Address
[transferAmount] :: Transfer -> Amount
data Burn
Burn :: Address -> Amount -> Burn
[burnAddress] :: Burn -> Address
[burnAmount] :: Burn -> Amount
data FaucetAccount
FaucetAccount :: Address -> Amount -> FaucetAccount
[faucetAccountTo] :: FaucetAccount -> Address
[faucetAccountAmount] :: FaucetAccount -> Amount
instance GHC.Generics.Generic Nameservice.Modules.Token.Messages.Burn
instance GHC.Show.Show Nameservice.Modules.Token.Messages.Burn
instance GHC.Classes.Eq Nameservice.Modules.Token.Messages.Burn
instance GHC.Generics.Generic Nameservice.Modules.Token.Messages.Transfer
instance GHC.Show.Show Nameservice.Modules.Token.Messages.Transfer
instance GHC.Classes.Eq Nameservice.Modules.Token.Messages.Transfer
instance GHC.Generics.Generic Nameservice.Modules.Token.Messages.FaucetAccount
instance GHC.Show.Show Nameservice.Modules.Token.Messages.FaucetAccount
instance GHC.Classes.Eq Nameservice.Modules.Token.Messages.FaucetAccount
instance Proto3.Suite.Class.Message Nameservice.Modules.Token.Messages.Burn
instance Proto3.Suite.Class.Named Nameservice.Modules.Token.Messages.Burn
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Token.Messages.Burn
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Token.Messages.Burn
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Token.Messages.Burn
instance Proto3.Suite.Class.Message Nameservice.Modules.Token.Messages.Transfer
instance Proto3.Suite.Class.Named Nameservice.Modules.Token.Messages.Transfer
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Token.Messages.Transfer
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Token.Messages.Transfer
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Token.Messages.Transfer
instance Proto3.Suite.Class.Message Nameservice.Modules.Token.Messages.FaucetAccount
instance Proto3.Suite.Class.Named Nameservice.Modules.Token.Messages.FaucetAccount
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Token.Messages.FaucetAccount
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Token.Messages.FaucetAccount
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Token.Messages.FaucetAccount

module Nameservice.Modules.Token.Keeper
data Token m a
[PutBalance] :: Address -> Amount -> Token m ()
[GetBalance'] :: Address -> Token m (Maybe Amount)
getBalance' :: forall r_a11TO. MemberWithError Token r_a11TO => Address -> Sem r_a11TO (Maybe Amount)
putBalance :: forall r_a11TL. MemberWithError Token r_a11TL => Address -> Amount -> Sem r_a11TL ()
type TokenEffs = '[Token, Error TokenError]
storeKey :: StoreKey "token"
eval :: Members [RawStore, Error AppError] r => forall a. Sem (Token : (Error TokenError : r)) a -> Sem r a
faucetAccount :: Members [Logger, Output Event] r => Members TokenEffs r => FaucetAccount -> Sem r ()
getBalance :: Member Token r => Address -> Sem r Amount
transfer :: Members [Logger, Output Event] r => Members TokenEffs r => Address -> Amount -> Address -> Sem r ()
burn :: Members TokenEffs r => Address -> Amount -> Sem r ()
mint :: Member Token r => Address -> Amount -> Sem r ()

module Nameservice.Modules.Token.Router
type MessageApi = TypedMessage Burn :~> Return () :<|> TypedMessage Transfer :~> Return () :<|> TypedMessage FaucetAccount :~> Return ()
messageHandlers :: Members TokenEffs r => Members BaseAppEffs r => RouteTx MessageApi r  'DeliverTx

module Nameservice.Modules.Token.Query

-- | Query Api
type TokenContents = '[(Address, Amount)]
type QueryApi = QueryApi TokenContents
server :: Members [RawStore, Error AppError] r => RouteQ QueryApi r

module Nameservice.Modules.Token
type TokenM r = Module "token" MessageApi QueryApi TokenEffs r
tokenModule :: Members BaseAppEffs r => Members TokenEffs r => TokenM r

-- | Used as a unique identifier for an account.
data Address
newtype Amount
Amount :: Word64 -> Amount
data TokenError
InsufficientFunds :: Text -> TokenError
data Transfer
Transfer :: Address -> Address -> Amount -> Transfer
[transferTo] :: Transfer -> Address
[transferFrom] :: Transfer -> Address
[transferAmount] :: Transfer -> Amount
data Burn
Burn :: Address -> Amount -> Burn
[burnAddress] :: Burn -> Address
[burnAmount] :: Burn -> Amount
data FaucetAccount
FaucetAccount :: Address -> Amount -> FaucetAccount
[faucetAccountTo] :: FaucetAccount -> Address
[faucetAccountAmount] :: FaucetAccount -> Amount
data Token m a
type TokenEffs = '[Token, Error TokenError]
data Faucetted
Faucetted :: Address -> Amount -> Faucetted
[faucettedAccount] :: Faucetted -> Address
[faucettedAmount] :: Faucetted -> Amount
data TransferEvent
TransferEvent :: Amount -> Address -> Address -> TransferEvent
[transferEventAmount] :: TransferEvent -> Amount
[transferEventTo] :: TransferEvent -> Address
[transferEventFrom] :: TransferEvent -> Address
getBalance :: Member Token r => Address -> Sem r Amount
faucetAccount :: Members [Logger, Output Event] r => Members TokenEffs r => FaucetAccount -> Sem r ()
transfer :: Members [Logger, Output Event] r => Members TokenEffs r => Address -> Amount -> Address -> Sem r ()
mint :: Member Token r => Address -> Amount -> Sem r ()
burn :: Members TokenEffs r => Address -> Amount -> Sem r ()
eval :: Members [RawStore, Error AppError] r => forall a. Sem (Token : (Error TokenError : r)) a -> Sem r a
type MessageApi = TypedMessage Burn :~> Return () :<|> TypedMessage Transfer :~> Return () :<|> TypedMessage FaucetAccount :~> Return ()
messageHandlers :: Members TokenEffs r => Members BaseAppEffs r => RouteTx MessageApi r  'DeliverTx
type QueryApi = QueryApi TokenContents
server :: Members [RawStore, Error AppError] r => RouteQ QueryApi r

module Nameservice.Modules.Nameservice.Types
type NameserviceModuleName = "nameservice"
newtype Name
Name :: Text -> Name
data Whois
Whois :: Text -> Address -> Amount -> Whois
[whoisValue] :: Whois -> Text
[whoisOwner] :: Whois -> Address
[whoisPrice] :: Whois -> Amount
data NameserviceError
InsufficientBid :: Text -> NameserviceError
UnauthorizedSet :: Text -> NameserviceError
InvalidDelete :: Text -> NameserviceError
data NameClaimed
NameClaimed :: Address -> Name -> Text -> Amount -> NameClaimed
[nameClaimedOwner] :: NameClaimed -> Address
[nameClaimedName] :: NameClaimed -> Name
[nameClaimedValue] :: NameClaimed -> Text
[nameClaimedBid] :: NameClaimed -> Amount
nameClaimedAesonOptions :: Options
data NameRemapped
NameRemapped :: Name -> Text -> Text -> NameRemapped
[nameRemappedName] :: NameRemapped -> Name
[nameRemappedOldValue] :: NameRemapped -> Text
[nameRemappedNewValue] :: NameRemapped -> Text
nameRemappedAesonOptions :: Options
data NameDeleted
NameDeleted :: Name -> NameDeleted
[nameDeletedName] :: NameDeleted -> Name
nameDeletedAesonOptions :: Options
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Types.NameDeleted
instance GHC.Show.Show Nameservice.Modules.Nameservice.Types.NameDeleted
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Types.NameDeleted
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Types.NameRemapped
instance GHC.Show.Show Nameservice.Modules.Nameservice.Types.NameRemapped
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Types.NameRemapped
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Types.NameClaimed
instance GHC.Show.Show Nameservice.Modules.Nameservice.Types.NameClaimed
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Types.NameClaimed
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Types.Whois
instance GHC.Show.Show Nameservice.Modules.Nameservice.Types.Whois
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Types.Whois
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Nameservice.Types.Name
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Nameservice.Types.Name
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Types.Name
instance GHC.Show.Show Nameservice.Modules.Nameservice.Types.Name
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Types.Name
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Nameservice.Types.NameDeleted
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Nameservice.Types.NameDeleted
instance Tendermint.SDK.BaseApp.Events.ToEvent Nameservice.Modules.Nameservice.Types.NameDeleted
instance Tendermint.SDK.BaseApp.Logger.Select Nameservice.Modules.Nameservice.Types.NameDeleted
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Nameservice.Types.NameRemapped
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Nameservice.Types.NameRemapped
instance Tendermint.SDK.BaseApp.Events.ToEvent Nameservice.Modules.Nameservice.Types.NameRemapped
instance Tendermint.SDK.BaseApp.Logger.Select Nameservice.Modules.Nameservice.Types.NameRemapped
instance Data.Aeson.Types.ToJSON.ToJSON Nameservice.Modules.Nameservice.Types.NameClaimed
instance Data.Aeson.Types.FromJSON.FromJSON Nameservice.Modules.Nameservice.Types.NameClaimed
instance Tendermint.SDK.BaseApp.Events.ToEvent Nameservice.Modules.Nameservice.Types.NameClaimed
instance Tendermint.SDK.BaseApp.Logger.Select Nameservice.Modules.Nameservice.Types.NameClaimed
instance Tendermint.SDK.BaseApp.Errors.IsAppError Nameservice.Modules.Nameservice.Types.NameserviceError
instance Proto3.Suite.Class.Message Nameservice.Modules.Nameservice.Types.Whois
instance Proto3.Suite.Class.Named Nameservice.Modules.Nameservice.Types.Whois
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Nameservice.Types.Whois
instance Tendermint.SDK.BaseApp.Store.RawStore.IsKey Nameservice.Modules.Nameservice.Types.Name Nameservice.Modules.Nameservice.Types.NameserviceModuleName
instance Tendermint.SDK.BaseApp.Query.Types.Queryable Nameservice.Modules.Nameservice.Types.Whois
instance Proto3.Suite.Class.Primitive Nameservice.Modules.Nameservice.Types.Name
instance Proto3.Suite.Class.HasDefault Nameservice.Modules.Nameservice.Types.Name
instance Proto3.Suite.Class.MessageField Nameservice.Modules.Nameservice.Types.Name
instance Data.String.IsString Nameservice.Modules.Nameservice.Types.Name
instance Tendermint.SDK.BaseApp.Query.Types.FromQueryData Nameservice.Modules.Nameservice.Types.Name
instance Tendermint.SDK.BaseApp.Store.RawStore.RawKey Nameservice.Modules.Nameservice.Types.Name

module Nameservice.Modules.Nameservice.Messages
data SetName
SetName :: Name -> Address -> Text -> SetName
[setNameName] :: SetName -> Name
[setNameOwner] :: SetName -> Address
[setNameValue] :: SetName -> Text
data BuyName
BuyName :: Amount -> Name -> Text -> Address -> BuyName
[buyNameBid] :: BuyName -> Amount
[buyNameName] :: BuyName -> Name
[buyNameValue] :: BuyName -> Text
[buyNameBuyer] :: BuyName -> Address
data DeleteName
DeleteName :: Address -> Name -> DeleteName
[deleteNameOwner] :: DeleteName -> Address
[deleteNameName] :: DeleteName -> Name
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Messages.BuyName
instance GHC.Show.Show Nameservice.Modules.Nameservice.Messages.BuyName
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Messages.BuyName
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Messages.DeleteName
instance GHC.Show.Show Nameservice.Modules.Nameservice.Messages.DeleteName
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Messages.DeleteName
instance GHC.Generics.Generic Nameservice.Modules.Nameservice.Messages.SetName
instance GHC.Show.Show Nameservice.Modules.Nameservice.Messages.SetName
instance GHC.Classes.Eq Nameservice.Modules.Nameservice.Messages.SetName
instance Proto3.Suite.Class.Message Nameservice.Modules.Nameservice.Messages.BuyName
instance Proto3.Suite.Class.Named Nameservice.Modules.Nameservice.Messages.BuyName
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Nameservice.Messages.BuyName
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Nameservice.Messages.BuyName
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Nameservice.Messages.BuyName
instance Proto3.Suite.Class.Message Nameservice.Modules.Nameservice.Messages.DeleteName
instance Proto3.Suite.Class.Named Nameservice.Modules.Nameservice.Messages.DeleteName
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Nameservice.Messages.DeleteName
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Nameservice.Messages.DeleteName
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Nameservice.Messages.DeleteName
instance Proto3.Suite.Class.Message Nameservice.Modules.Nameservice.Messages.SetName
instance Proto3.Suite.Class.Named Nameservice.Modules.Nameservice.Messages.SetName
instance Tendermint.SDK.Types.Message.HasMessageType Nameservice.Modules.Nameservice.Messages.SetName
instance Tendermint.SDK.Codec.HasCodec Nameservice.Modules.Nameservice.Messages.SetName
instance Tendermint.SDK.Types.Message.ValidateMessage Nameservice.Modules.Nameservice.Messages.SetName

module Nameservice.Modules.Nameservice.Keeper
data NameserviceKeeper m a
[PutWhois] :: Name -> Whois -> NameserviceKeeper m ()
[GetWhois] :: Name -> NameserviceKeeper m (Maybe Whois)
[DeleteWhois] :: Name -> NameserviceKeeper m ()
deleteWhois :: forall r_a1fvf. MemberWithError NameserviceKeeper r_a1fvf => Name -> Sem r_a1fvf ()
getWhois :: forall r_a1fvd. MemberWithError NameserviceKeeper r_a1fvd => Name -> Sem r_a1fvd (Maybe Whois)
putWhois :: forall r_a1fva. MemberWithError NameserviceKeeper r_a1fva => Name -> Whois -> Sem r_a1fva ()
type NameserviceEffs = '[NameserviceKeeper, Error NameserviceError]
storeKey :: StoreKey NameserviceModuleName
eval :: Members [RawStore, Error AppError] r => forall a. Sem (NameserviceKeeper : (Error NameserviceError : r)) a -> Sem r a
setName :: Members [Logger, Output Event] r => Members NameserviceEffs r => SetName -> Sem r ()
deleteName :: Members [Logger, Token, Output Event] r => Members NameserviceEffs r => DeleteName -> Sem r ()

-- | did it succeed
buyName :: Members [Logger, Output Event] r => Members TokenEffs r => Members NameserviceEffs r => BuyName -> Sem r ()

module Nameservice.Modules.Nameservice.Router
type MessageApi = TypedMessage BuyName :~> Return () :<|> TypedMessage SetName :~> Return () :<|> TypedMessage DeleteName :~> Return ()
messageHandlers :: Members BaseAppEffs r => Members TokenEffs r => Members NameserviceEffs r => RouteTx MessageApi r  'DeliverTx
buyNameH :: Members BaseAppEffs r => Members TxEffs r => Members TokenEffs r => Members NameserviceEffs r => RoutingTx BuyName -> Sem r ()
setNameH :: Members BaseAppEffs r => Members TxEffs r => Members NameserviceEffs r => RoutingTx SetName -> Sem r ()
deleteNameH :: Members BaseAppEffs r => Members TxEffs r => Members TokenEffs r => Members NameserviceEffs r => RoutingTx DeleteName -> Sem r ()

module Nameservice.Modules.Nameservice.Query

-- | Query API
type NameserviceContents = '[(Name, Whois)]
type QueryApi = QueryApi NameserviceContents
server :: Members [RawStore, Error AppError] r => RouteQ QueryApi r

module Nameservice.Modules.Nameservice
type NameserviceM r = Module "nameservice" MessageApi QueryApi NameserviceEffs r
nameserviceModule :: Members BaseAppEffs r => Members TokenEffs r => Members NameserviceEffs r => NameserviceM r
newtype Name
Name :: Text -> Name
data Whois
Whois :: Text -> Address -> Amount -> Whois
[whoisValue] :: Whois -> Text
[whoisOwner] :: Whois -> Address
[whoisPrice] :: Whois -> Amount
data NameserviceError
InsufficientBid :: Text -> NameserviceError
UnauthorizedSet :: Text -> NameserviceError
InvalidDelete :: Text -> NameserviceError
data NameClaimed
NameClaimed :: Address -> Name -> Text -> Amount -> NameClaimed
[nameClaimedOwner] :: NameClaimed -> Address
[nameClaimedName] :: NameClaimed -> Name
[nameClaimedValue] :: NameClaimed -> Text
[nameClaimedBid] :: NameClaimed -> Amount
data NameRemapped
NameRemapped :: Name -> Text -> Text -> NameRemapped
[nameRemappedName] :: NameRemapped -> Name
[nameRemappedOldValue] :: NameRemapped -> Text
[nameRemappedNewValue] :: NameRemapped -> Text
data NameDeleted
NameDeleted :: Name -> NameDeleted
[nameDeletedName] :: NameDeleted -> Name
data BuyName
BuyName :: Amount -> Name -> Text -> Address -> BuyName
[buyNameBid] :: BuyName -> Amount
[buyNameName] :: BuyName -> Name
[buyNameValue] :: BuyName -> Text
[buyNameBuyer] :: BuyName -> Address
data SetName
SetName :: Name -> Address -> Text -> SetName
[setNameName] :: SetName -> Name
[setNameOwner] :: SetName -> Address
[setNameValue] :: SetName -> Text
data DeleteName
DeleteName :: Address -> Name -> DeleteName
[deleteNameOwner] :: DeleteName -> Address
[deleteNameName] :: DeleteName -> Name
type NameserviceEffs = '[NameserviceKeeper, Error NameserviceError]
getWhois :: forall r_a1fvd. MemberWithError NameserviceKeeper r_a1fvd => Name -> Sem r_a1fvd (Maybe Whois)

-- | did it succeed
buyName :: Members [Logger, Output Event] r => Members TokenEffs r => Members NameserviceEffs r => BuyName -> Sem r ()
setName :: Members [Logger, Output Event] r => Members NameserviceEffs r => SetName -> Sem r ()
deleteName :: Members [Logger, Token, Output Event] r => Members NameserviceEffs r => DeleteName -> Sem r ()
eval :: Members [RawStore, Error AppError] r => forall a. Sem (NameserviceKeeper : (Error NameserviceError : r)) a -> Sem r a
type MessageApi = TypedMessage BuyName :~> Return () :<|> TypedMessage SetName :~> Return () :<|> TypedMessage DeleteName :~> Return ()
messageHandlers :: Members BaseAppEffs r => Members TokenEffs r => Members NameserviceEffs r => RouteTx MessageApi r  'DeliverTx
type QueryApi = QueryApi NameserviceContents
server :: Members [RawStore, Error AppError] r => RouteQ QueryApi r

module Nameservice.Application
type EffR = NameserviceEffs :& TokenEffs :& AuthEffs :& BaseApp CoreEffs
type NameserviceModules = '[NameserviceM EffR, TokenM EffR, AuthM EffR]
handlersContext :: HandlersContext Secp256k1 NameserviceModules EffR CoreEffs

module Nameservice.Server
makeAndServeApplication :: AppConfig -> IO ()
