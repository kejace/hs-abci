-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/f-o-a-m/kepler/blob/master/hs-abci-test-utils/README.md</a>
@package hs-abci-test-utils
@version 0.1.0.0

module Tendermint.Utils.Events

-- | A class that can parse event log items in the deliverTx response.
--   Primarily | useful for client applications and testing.
class ToEvent e => FromEvent e
fromEvent :: FromEvent e => Event -> Either Text e
fromEvent :: (FromEvent e, FromJSON e) => Event -> Either Text e

module Tendermint.Utils.QueryClient.Types

-- | Data is Nothing iff Raw includes a non-0 response value
data QueryClientResponse a
QueryResponse :: QueryResult a -> QueryClientResponse a
QueryError :: AppError -> QueryClientResponse a
instance GHC.Show.Show a => GHC.Show.Show (Tendermint.Utils.QueryClient.Types.QueryClientResponse a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Tendermint.Utils.QueryClient.Types.QueryClientResponse a)

module Tendermint.Utils.QueryClient.Class
class Monad m => RunQueryClient m

-- | How to make a request.
runQuery :: RunQueryClient m => Query -> m Query
type QueryStringList = [(Text, Text)]
class HasQueryClient m layout where {
    type family ClientQ (m :: * -> *) layout :: *;
}
genClientQ :: HasQueryClient m layout => Proxy m -> Proxy layout -> (Query, QueryStringList) -> ClientQ m layout
appendToQueryString :: Text -> Maybe Text -> QueryStringList -> QueryStringList
addQueryParamsToPath :: QueryStringList -> Text -> Text
leafGenClient :: HasCodec a => RunQueryClient m => (Query, QueryStringList) -> m (QueryClientResponse a)

-- | Singleton type representing a client for an empty API.
data EmptyQueryClient
EmptyQueryClient :: EmptyQueryClient
instance GHC.Enum.Enum Tendermint.Utils.QueryClient.Class.EmptyQueryClient
instance GHC.Enum.Bounded Tendermint.Utils.QueryClient.Class.EmptyQueryClient
instance GHC.Show.Show Tendermint.Utils.QueryClient.Class.EmptyQueryClient
instance GHC.Classes.Eq Tendermint.Utils.QueryClient.Class.EmptyQueryClient
instance Tendermint.Utils.QueryClient.Class.HasQueryClient m Tendermint.Utils.QueryClient.Class.EmptyQueryClient
instance (Tendermint.Utils.QueryClient.Class.HasQueryClient m a, Tendermint.Utils.QueryClient.Class.HasQueryClient m b) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (a Servant.API.Alternative.:<|> b)
instance (GHC.TypeLits.KnownSymbol path, Tendermint.Utils.QueryClient.Class.HasQueryClient m a) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (path Servant.API.Sub.:> a)
instance (GHC.TypeLits.KnownSymbol sym, Web.Internal.HttpApiData.ToHttpApiData a, Tendermint.Utils.QueryClient.Class.HasQueryClient m api, Data.Singletons.Bool.SBoolI (Servant.API.Modifiers.FoldRequired mods)) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (Servant.API.QueryParam.QueryParam' mods sym a Servant.API.Sub.:> api)
instance (Tendermint.SDK.BaseApp.Store.RawStore.RawKey k, Tendermint.Utils.QueryClient.Class.HasQueryClient m a) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (Tendermint.SDK.BaseApp.Query.Types.QA k Servant.API.Sub.:> a)
instance (Web.Internal.HttpApiData.ToHttpApiData a, Tendermint.Utils.QueryClient.Class.HasQueryClient m api) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (Servant.API.Capture.Capture' mods capture a Servant.API.Sub.:> api)
instance (Tendermint.SDK.Codec.HasCodec a, Tendermint.Utils.QueryClient.Class.RunQueryClient m) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (Tendermint.SDK.BaseApp.Query.Types.Leaf a)
instance (Tendermint.Utils.QueryClient.Class.RunQueryClient m, Tendermint.SDK.BaseApp.Query.Types.Queryable a, name Data.Type.Equality.~ Tendermint.SDK.BaseApp.Query.Types.Name a, GHC.TypeLits.KnownSymbol name) => Tendermint.Utils.QueryClient.Class.HasQueryClient m (Tendermint.SDK.BaseApp.Query.Store.StoreLeaf a)
instance Tendermint.Utils.QueryClient.Class.RunQueryClient (Control.Monad.Trans.Reader.ReaderT Network.Tendermint.Client.Internal.RPCClient.Config GHC.Types.IO)

module Tendermint.Utils.TxClient.Types
data TxOpts
TxOpts :: Int64 -> Signer -> TxOpts
[txOptsGas] :: TxOpts -> Int64
[txOptsSigner] :: TxOpts -> Signer
data Signer
Signer :: Address -> (RawTransaction -> RawTransaction) -> Signer
[signerAddress] :: Signer -> Address
[signerSign] :: Signer -> RawTransaction -> RawTransaction
makeSignerFromKey :: RecoverableSignatureSchema alg => Message alg ~ Digest SHA256 => Proxy alg -> PrivateKey alg -> Signer
data TxResponse a
TxResponse :: a -> [Event] -> TxResponse a
[txResponseResult] :: TxResponse a -> a
[txResponseEvents] :: TxResponse a -> [Event]
TxError :: AppError -> TxResponse a
data SynchronousResponse c d
SynchronousResponse :: TxResponse c -> TxResponse d -> SynchronousResponse c d
[checkTxResponse] :: SynchronousResponse c d -> TxResponse c
[deliverTxResponse] :: SynchronousResponse c d -> TxResponse d
data TxClientResponse c d
RPCError :: Text -> TxClientResponse c d
ParseError :: RouteContext -> Text -> TxClientResponse c d
Response :: SynchronousResponse c d -> TxClientResponse c d
parseRPCResponse :: HasCodec a => HasCodec (OnCheckReturn  'CheckTx oc a) => Proxy a -> Proxy (oc :: OnCheck) -> ResultBroadcastTxCommit -> TxClientResponse (OnCheckReturn  'CheckTx oc a) a
instance (GHC.Show.Show c, GHC.Show.Show d) => GHC.Show.Show (Tendermint.Utils.TxClient.Types.TxClientResponse c d)
instance (GHC.Classes.Eq c, GHC.Classes.Eq d) => GHC.Classes.Eq (Tendermint.Utils.TxClient.Types.TxClientResponse c d)
instance (GHC.Show.Show c, GHC.Show.Show d) => GHC.Show.Show (Tendermint.Utils.TxClient.Types.SynchronousResponse c d)
instance (GHC.Classes.Eq c, GHC.Classes.Eq d) => GHC.Classes.Eq (Tendermint.Utils.TxClient.Types.SynchronousResponse c d)
instance GHC.Show.Show a => GHC.Show.Show (Tendermint.Utils.TxClient.Types.TxResponse a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Tendermint.Utils.TxClient.Types.TxResponse a)

module Tendermint.Utils.TxClient.Class
data ClientConfig
ClientConfig :: Config -> (Address -> IO Word64) -> ClientConfig
[clientRPC] :: ClientConfig -> Config
[clientGetNonce] :: ClientConfig -> Address -> IO Word64
class Monad m => RunTxClient m

-- | How to make a request.
runTx :: RunTxClient m => RawTransaction -> m ResultBroadcastTxCommit
getNonce :: RunTxClient m => Address -> m Word64
class HasTxClient m layout where {
    type family ClientT (m :: * -> *) layout :: *;
}
genClientT :: HasTxClient m layout => Proxy m -> Proxy layout -> ClientTxOpts -> ClientT m layout

-- | Singleton type representing a client for an empty API.
data EmptyTxClient
EmptyTxClient :: EmptyTxClient
defaultClientTxOpts :: ClientTxOpts
instance GHC.Enum.Enum Tendermint.Utils.TxClient.Class.EmptyTxClient
instance GHC.Enum.Bounded Tendermint.Utils.TxClient.Class.EmptyTxClient
instance GHC.Show.Show Tendermint.Utils.TxClient.Class.EmptyTxClient
instance GHC.Classes.Eq Tendermint.Utils.TxClient.Class.EmptyTxClient
instance Tendermint.Utils.TxClient.Class.HasTxClient m Tendermint.SDK.BaseApp.Transaction.Types.EmptyTxServer
instance (Tendermint.Utils.TxClient.Class.HasTxClient m a, Tendermint.Utils.TxClient.Class.HasTxClient m b) => Tendermint.Utils.TxClient.Class.HasTxClient m (a Servant.API.Alternative.:<|> b)
instance (GHC.TypeLits.KnownSymbol path, Tendermint.Utils.TxClient.Class.HasTxClient m a) => Tendermint.Utils.TxClient.Class.HasTxClient m (path Servant.API.Sub.:> a)
instance (Tendermint.SDK.Types.Message.HasMessageType msg, Tendermint.SDK.Codec.HasCodec msg, Tendermint.SDK.Codec.HasCodec a, Tendermint.SDK.Codec.HasCodec (Tendermint.SDK.BaseApp.Transaction.Modifier.OnCheckReturn 'Tendermint.SDK.BaseApp.Transaction.Types.CheckTx oc a), Tendermint.Utils.TxClient.Class.RunTxClient m) => Tendermint.Utils.TxClient.Class.HasTxClient m (Tendermint.SDK.BaseApp.Transaction.Types.TypedMessage msg Tendermint.SDK.BaseApp.Transaction.Types.:~> Tendermint.SDK.BaseApp.Transaction.Types.Return' oc a)
instance Tendermint.Utils.TxClient.Class.RunTxClient (Control.Monad.Trans.Reader.ReaderT Tendermint.Utils.TxClient.Class.ClientConfig GHC.Types.IO)

module Tendermint.Utils.Client
class Monad m => RunQueryClient m

-- | How to make a request.
runQuery :: RunQueryClient m => Query -> m Query
class HasQueryClient m layout where {
    type family ClientQ (m :: * -> *) layout :: *;
}
genClientQ :: HasQueryClient m layout => Proxy m -> Proxy layout -> (Query, QueryStringList) -> ClientQ m layout

-- | Data is Nothing iff Raw includes a non-0 response value
data QueryClientResponse a
QueryResponse :: QueryResult a -> QueryClientResponse a
QueryError :: AppError -> QueryClientResponse a

-- | Singleton type representing a client for an empty API.
data EmptyQueryClient
EmptyQueryClient :: EmptyQueryClient
class HasTxClient m layout where {
    type family ClientT (m :: * -> *) layout :: *;
}
genClientT :: HasTxClient m layout => Proxy m -> Proxy layout -> ClientTxOpts -> ClientT m layout
class Monad m => RunTxClient m

-- | How to make a request.
runTx :: RunTxClient m => RawTransaction -> m ResultBroadcastTxCommit
getNonce :: RunTxClient m => Address -> m Word64

-- | Singleton type representing a client for an empty API.
data EmptyTxClient
EmptyTxClient :: EmptyTxClient
data TxClientResponse c d
RPCError :: Text -> TxClientResponse c d
ParseError :: RouteContext -> Text -> TxClientResponse c d
Response :: SynchronousResponse c d -> TxClientResponse c d
data SynchronousResponse c d
SynchronousResponse :: TxResponse c -> TxResponse d -> SynchronousResponse c d
[checkTxResponse] :: SynchronousResponse c d -> TxResponse c
[deliverTxResponse] :: SynchronousResponse c d -> TxResponse d
data TxResponse a
TxResponse :: a -> [Event] -> TxResponse a
[txResponseResult] :: TxResponse a -> a
[txResponseEvents] :: TxResponse a -> [Event]
TxError :: AppError -> TxResponse a
data ClientConfig
ClientConfig :: Config -> (Address -> IO Word64) -> ClientConfig
[clientRPC] :: ClientConfig -> Config
[clientGetNonce] :: ClientConfig -> Address -> IO Word64
defaultClientTxOpts :: ClientTxOpts
data Signer
Signer :: Address -> (RawTransaction -> RawTransaction) -> Signer
[signerAddress] :: Signer -> Address
[signerSign] :: Signer -> RawTransaction -> RawTransaction
data TxOpts
TxOpts :: Int64 -> Signer -> TxOpts
[txOptsGas] :: TxOpts -> Int64
[txOptsSigner] :: TxOpts -> Signer
makeSignerFromKey :: RecoverableSignatureSchema alg => Message alg ~ Digest SHA256 => Proxy alg -> PrivateKey alg -> Signer

module Tendermint.Utils.ClientUtils

-- | Tx helpers
assertTx :: Monad m => m (TxClientResponse a b) -> m (SynchronousResponse a b)
deliverTxEvents :: Monad m => FromEvent e => Proxy e -> SynchronousResponse a b -> m ([Text], [e])
ensureCheckResponseCode :: Monad m => Word32 -> SynchronousResponse a b -> m ()
ensureDeliverResponseCode :: Monad m => Word32 -> SynchronousResponse a b -> m ()
ensureResponseCodes :: Monad m => (Word32, Word32) -> SynchronousResponse a b -> m ()

-- | Query helpers
assertQuery :: Monad m => m (QueryClientResponse a) -> m (QueryResult a)
ensureQueryResponseCode :: Monad m => Word32 -> QueryClientResponse a -> m ()
rpcConfig :: Config

module Tendermint.Utils.User
data User
User :: SecKey -> Address -> User
[userPrivKey] :: User -> SecKey
[userAddress] :: User -> Address
makeUser :: String -> User
makeSignerFromUser :: User -> Signer
