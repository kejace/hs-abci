-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/f-o-a-m/kepler/hs-abci-docs/simple-storage#readme</a>
@package simple-storage
@version 0.1.0.0

module Proto.SimpleStorage.Messages

-- | Fields :
--   
--   <ul>
--   <li><a>username</a> <tt>:: Lens' UpdateCount Data.Text.Text</tt></li>
--   <li><a>count</a> <tt>:: Lens' UpdateCount Data.Int.Int32</tt></li>
--   </ul>
data UpdateCount
instance GHC.Classes.Ord Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Classes.Eq Proto.SimpleStorage.Messages.UpdateCount
instance GHC.Show.Show Proto.SimpleStorage.Messages.UpdateCount
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "username" Data.Text.Internal.Text
instance Data.ProtoLens.Field.HasField Proto.SimpleStorage.Messages.UpdateCount "count" GHC.Int.Int32
instance Data.ProtoLens.Message.Message Proto.SimpleStorage.Messages.UpdateCount
instance Control.DeepSeq.NFData Proto.SimpleStorage.Messages.UpdateCount

module Proto.SimpleStorage.Messages_Fields
count :: forall f s a. (Functor f, HasField s "count" a) => LensLike' f s a
username :: forall f s a. (Functor f, HasField s "username" a) => LensLike' f s a

module SimpleStorage.Config
data AppConfig
AppConfig :: Context -> AppConfig
[_baseAppContext] :: AppConfig -> Context
baseAppContext :: Iso' AppConfig Context
makeAppConfig :: IO AppConfig

module SimpleStorage.Modules.SimpleStorage.Message
data UpdateCountTx
UpdateCountTx :: Text -> Int32 -> UpdateCountTx
[updateCountTxUsername] :: UpdateCountTx -> Text
[updateCountTxCount] :: UpdateCountTx -> Int32
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.HasMessageType SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Types.Message.ValidateMessage SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Control.Lens.Wrapped.Wrapped SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Message.UpdateCountTx

module SimpleStorage.Modules.SimpleStorage.Types
newtype Count
Count :: Int32 -> Count
data CountKey
CountKey :: CountKey
data CountSet
CountSet :: Count -> CountSet
[newCount] :: CountSet -> Count
countSetOptions :: Options
instance GHC.Generics.Generic SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Serialize.Serialize SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Show.Show SimpleStorage.Modules.SimpleStorage.Types.Count
instance GHC.Classes.Eq SimpleStorage.Modules.SimpleStorage.Types.Count
instance Data.Aeson.Types.ToJSON.ToJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Data.Aeson.Types.FromJSON.FromJSON SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Events.ToEvent SimpleStorage.Modules.SimpleStorage.Types.CountSet
instance Tendermint.SDK.BaseApp.Store.RawStore.RawKey SimpleStorage.Modules.SimpleStorage.Types.CountKey
instance Tendermint.SDK.BaseApp.Store.RawStore.IsKey SimpleStorage.Modules.SimpleStorage.Types.CountKey "simple_storage"
instance Tendermint.SDK.BaseApp.Query.Types.FromQueryData SimpleStorage.Modules.SimpleStorage.Types.CountKey
instance Tendermint.SDK.Codec.HasCodec SimpleStorage.Modules.SimpleStorage.Types.Count
instance Tendermint.SDK.BaseApp.Query.Types.Queryable SimpleStorage.Modules.SimpleStorage.Types.Count

module SimpleStorage.Modules.SimpleStorage.Keeper
data SimpleStorage m a
type SimpleStorageEffs = '[SimpleStorage]
storeKey :: StoreKey "simple_storage"
updateCount :: Members '[SimpleStorage, Output Event] r => Count -> Sem r ()
getCount :: forall r_aOwe. MemberWithError SimpleStorage r_aOwe => Sem r_aOwe Count
eval :: forall r. Members '[RawStore, Error AppError] r => forall a. Sem (SimpleStorage : r) a -> Sem r a

module SimpleStorage.Modules.SimpleStorage.Router
type MessageApi = TypedMessage UpdateCountTx :~> Return ()
messageHandlers :: Member SimpleStorage r => RouteTx MessageApi r  'DeliverTx

module SimpleStorage.Modules.SimpleStorage.Query
type CountStoreContents = '[(CountKey, Count)]
type QueryApi = QueryApi CountStoreContents
server :: Members [RawStore, Error AppError] r => RouteQ QueryApi r

module SimpleStorage.Modules.SimpleStorage
type SimpleStorageM r = Module "simple_storage" MessageApi QueryApi SimpleStorageEffs r
type QueryApi = QueryApi CountStoreContents
type MessageApi = TypedMessage UpdateCountTx :~> Return ()
simpleStorageModule :: Member SimpleStorage r => Members BaseAppEffs r => SimpleStorageM r
data SimpleStorage m a
type SimpleStorageEffs = '[SimpleStorage]
getCount :: forall r_aOwe. MemberWithError SimpleStorage r_aOwe => Sem r_aOwe Count
updateCount :: Members '[SimpleStorage, Output Event] r => Count -> Sem r ()
eval :: forall r. Members '[RawStore, Error AppError] r => forall a. Sem (SimpleStorage : r) a -> Sem r a

module SimpleStorage.Application
type EffR = SimpleStorageEffs :& AuthEffs :& BaseApp CoreEffs
type SimpleStorageModules = '[SimpleStorageM EffR, AuthM EffR]
handlersContext :: HandlersContext Secp256k1 SimpleStorageModules EffR CoreEffs

module SimpleStorage.Server
makeAndServeApplication :: AppConfig -> IO ()
