-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/f-o-a-m/kepler/hs-abci-server#readme</a>
@package hs-abci-server
@version 0.1.0.0

module Network.ABCI.Server.App.DecodeError
data DecodeError
CanNotDecodeRequest :: ByteString -> String -> DecodeError
[canNotDecodeRequestRequest] :: DecodeError -> ByteString
[canNotDecodeRequestError] :: DecodeError -> String
NoValueInRequest :: ByteString -> FieldSet -> DecodeError
[noValueInRequestRequest] :: DecodeError -> ByteString
[noValueInRequestUnknownFields] :: DecodeError -> FieldSet
ProtoLensParseError :: ByteString -> String -> DecodeError
[protoLensParseErrorRequest] :: DecodeError -> ByteString
[protoLensParseErrorError] :: DecodeError -> String
InvalidPrefix :: ByteString -> ByteString -> DecodeError
[invalidPrefixMsg] :: DecodeError -> ByteString
[invalidPrefixPrefix] :: DecodeError -> ByteString
print :: DecodeError -> String

module Network.ABCI.Server.App

-- | Application type that represents a well typed application, i.e. a
--   function from a typed <a>Request</a> to a typed <a>Response</a>.
newtype App m
App :: (forall (t :: MessageType). Request t -> m (Response t)) -> App m
[unApp] :: App m -> forall (t :: MessageType). Request t -> m (Response t)

-- | Compiles <a>App</a> down to <tt>AppBS</tt>
runApp :: forall m. Applicative m => App m -> LPByteStrings -> m LPByteStrings

-- | Transform an application from running in a custom monad to running in
--   <a>IO</a>.
transformApp :: (forall (t :: MessageType). m (Response t) -> g (Response t)) -> App m -> App g
withProto :: (forall (t :: MessageType). Request t -> a) -> Request'Value -> a

-- | Middleware is a component that sits between the server and
--   application. It can do such tasks as logging or response caching. What
--   follows is the general definition of middleware, though a middleware
--   author should feel free to modify this.
type Middleware m = App m -> App m

-- | Used to parametrize Request and Respone types
data MessageType
MTEcho :: MessageType
MTFlush :: MessageType
MTInfo :: MessageType
MTSetOption :: MessageType
MTInitChain :: MessageType
MTQuery :: MessageType
MTBeginBlock :: MessageType
MTCheckTx :: MessageType
MTDeliverTx :: MessageType
MTEndBlock :: MessageType
MTCommit :: MessageType
demoteRequestType :: forall (t :: MessageType). Request t -> MessageType
msgTypeKey :: MessageType -> String
data Request (m :: MessageType) :: *
[RequestEcho] :: Echo -> Request  'MTEcho
[RequestInfo] :: Info -> Request  'MTInfo
[RequestSetOption] :: SetOption -> Request  'MTSetOption
[RequestQuery] :: Query -> Request  'MTQuery
[RequestCheckTx] :: CheckTx -> Request  'MTCheckTx
[RequestFlush] :: Flush -> Request  'MTFlush
[RequestInitChain] :: InitChain -> Request  'MTInitChain
[RequestBeginBlock] :: BeginBlock -> Request  'MTBeginBlock
[RequestDeliverTx] :: DeliverTx -> Request  'MTDeliverTx
[RequestEndBlock] :: EndBlock -> Request  'MTEndBlock
[RequestCommit] :: Commit -> Request  'MTCommit
hashRequest :: forall (t :: MessageType). Request t -> HexString
data Response (m :: MessageType) :: *
[ResponseEcho] :: Echo -> Response  'MTEcho
[ResponseFlush] :: Flush -> Response  'MTFlush
[ResponseInfo] :: Info -> Response  'MTInfo
[ResponseSetOption] :: SetOption -> Response  'MTSetOption
[ResponseInitChain] :: InitChain -> Response  'MTInitChain
[ResponseQuery] :: Query -> Response  'MTQuery
[ResponseBeginBlock] :: BeginBlock -> Response  'MTBeginBlock
[ResponseCheckTx] :: CheckTx -> Response  'MTCheckTx
[ResponseDeliverTx] :: DeliverTx -> Response  'MTDeliverTx
[ResponseEndBlock] :: EndBlock -> Response  'MTEndBlock
[ResponseCommit] :: Commit -> Response  'MTCommit
[ResponseException] :: forall (m :: MessageType). Exception -> Response m

-- | ByteString which contains multiple length prefixed ByteStrings
newtype LPByteStrings
LPByteStrings :: ByteString -> LPByteStrings
[unLPByteStrings] :: LPByteStrings -> ByteString

-- | Decodes varlength-prefixed ByteString into ByteStrings
decodeLengthPrefix :: LPByteStrings -> Either DecodeError [ByteString]

-- | Encodes ByteStrings into varlength-prefixed ByteString
encodeLengthPrefix :: [ByteString] -> LPByteStrings
instance GHC.Classes.Eq Network.ABCI.Server.App.LPByteStrings
instance GHC.Classes.Ord Network.ABCI.Server.App.LPByteStrings
instance GHC.Enum.Enum Network.ABCI.Server.App.MessageType
instance GHC.Classes.Ord Network.ABCI.Server.App.MessageType
instance GHC.Classes.Eq Network.ABCI.Server.App.MessageType
instance Data.Aeson.Types.ToJSON.ToJSON (Network.ABCI.Server.App.Response t)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTEcho)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTFlush)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTInfo)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTSetOption)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTInitChain)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTQuery)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTBeginBlock)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTCheckTx)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTDeliverTx)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTEndBlock)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTCommit)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTEcho)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTFlush)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTInfo)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTSetOption)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTInitChain)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTQuery)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTBeginBlock)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTCheckTx)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTDeliverTx)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTEndBlock)
instance Data.Default.Class.Default (Network.ABCI.Server.App.Response 'Network.ABCI.Server.App.MTCommit)
instance Data.Aeson.Types.ToJSON.ToJSON (Network.ABCI.Server.App.Request t)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTEcho)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTInfo)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTSetOption)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTQuery)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTCheckTx)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTFlush)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTInitChain)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTBeginBlock)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTDeliverTx)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTEndBlock)
instance Data.Aeson.Types.FromJSON.FromJSON (Network.ABCI.Server.App.Request 'Network.ABCI.Server.App.MTCommit)

module Network.ABCI.Server

-- | Default ABCI app network settings for serving on localhost at the
--   standard port.
defaultLocalSettings :: ServerSettings

-- | Serve an ABCI application with custom <a>ServerSettings</a> and a
--   custom action to perform on acquiring the socket resource.
serveAppWith :: ServerSettings -> (AppData -> IO ()) -> App IO -> IO ()

-- | Serve an ABCI application with default local <a>ServerSettings</a> and
--   a no-op on acquiring the socket resource.
serveApp :: App IO -> IO ()
